#!/bin/bash
# DDNS script for Tencent Cloud Dnspod API v3.0 using ModifyDynamicDNS
# Author: Jackie264
# Requires: curl, jq, openssl

. /usr/lib/natmap/common.sh
. /usr/share/libubox/jshn.sh

# API Configuration
API_URL="https://dnspod.tencentcloudapi.com"
SERVICE="dnspod"
VERSION="2024-12-25"
ACTION="ModifyDynamicDNS"

# Initialize from input parameters
SECRET_ID="" # Replace or pass from input
SECRET_KEY="" # Replace or pass from input

# Generate signature for TC3-HMAC-SHA256
generate_signature() {
    local payload="$1"
    local timestamp
    timestamp=$(date +%s)
    local date
    date=$(date -u +"%Y-%m-%d")

    # Step 1: Create canonical request
    local hashed_payload
    hashed_payload=$(echo -n "$payload" | openssl dgst -sha256 | awk '{print $2}')
    local canonical_request="POST\n/\n\ncontent-type:application/json\nhost:dnspod.tencentcloudapi.com\n\ncontent-type;host\n$hashed_payload"

    # Step 2: Create string to sign
    local credential_scope="${date}/${SERVICE}/tc3_request"
    local hashed_canonical_request
    hashed_canonical_request=$(echo -n "$canonical_request" | openssl dgst -sha256 | awk '{print $2}')
    local string_to_sign="TC3-HMAC-SHA256\n$timestamp\n$credential_scope\n$hashed_canonical_request"

    # Step 3: Calculate signature
    local secret_date
    secret_date=$(echo -n "$date" | openssl dgst -sha256 -hmac "TC3${SECRET_KEY}" -binary)
    local secret_service
    secret_service=$(echo -n "$SERVICE" | openssl dgst -sha256 -hmac "$secret_date" -binary)
    local secret_signing
    secret_signing=$(echo -n "tc3_request" | openssl dgst -sha256 -hmac "$secret_service" -binary)
    local signature
    signature=$(echo -n "$string_to_sign" | openssl dgst -sha256 -hmac "$secret_signing" | awk '{print $2}')

    # Step 4: Generate Authorization header
    local authorization
    authorization="TC3-HMAC-SHA256 Credential=${SECRET_ID}/${credential_scope}, SignedHeaders=content-type;host, Signature=${signature}"

    echo "$authorization"
}

# Send HTTP request
http_request() {
    local payload="$1"

    # Generate headers
    local timestamp
    timestamp=$(date +%s)
    local authorization
    authorization=$(generate_signature "$payload")

    # Send request
    curl -s --retry 3 -X POST \
        -H "Authorization: ${authorization}" \
        -H "Content-Type: application/json" \
        -H "Host: dnspod.tencentcloudapi.com" \
        -H "X-TC-Action: ${ACTION}" \
        -H "X-TC-Timestamp: ${timestamp}" \
        -H "X-TC-Version: ${VERSION}" \
        --url "${API_URL}" \
        -d "$payload"
}

start() {
    local domain="$host"
    local record_id="$record_id"
    local record_line="$record_line"
    local record_line_id="$record_line_id"
    local value="$ip"
    local ttl="$ttl"

    # Construct payload
    payload=$(jq -n --arg domain "$domain" --argjson record_id "$record_id" \
        --arg record_line "$record_line" --arg value "$value" --argjson ttl "$ttl" \
        '{ 
            "Domain": $domain, 
            "RecordId": $record_id, 
            "RecordLine": $record_line, 
            "Value": $value, 
            "Ttl": $ttl 
        }')

    # Send request
    response=$(http_request "$payload")

    # Parse response
    local request_id
    local response_record_id
    request_id=$(echo "$response" | jq -r '.Response.RequestId // empty')
    response_record_id=$(echo "$response" | jq -r '.Response.RecordId // empty')

    if [ -n "$request_id" ]; then
        echo "Request succeeded. RequestId: $request_id, RecordId: $response_record_id"
    else
        echo "Request failed. Response: $response"
    fi
}

# Initialize variables from external JSON parameters
ALL_PARAMS="host record_id record_line ip ttl tokens"
eval "$(JSON_EXPORT "$1")"; shift

# Initialize global variables
INIT_GLOBAL_VAR SECRET_ID SECRET_KEY
eval "$tokens"

# Start DDNS process
start "$@"
